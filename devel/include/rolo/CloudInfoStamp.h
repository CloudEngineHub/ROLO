// Generated by gencpp from file rolo/CloudInfoStamp.msg
// DO NOT EDIT!


#ifndef ROLO_MESSAGE_CLOUDINFOSTAMP_H
#define ROLO_MESSAGE_CLOUDINFOSTAMP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/PointCloud2.h>

namespace rolo
{
template <class ContainerAllocator>
struct CloudInfoStamp_
{
  typedef CloudInfoStamp_<ContainerAllocator> Type;

  CloudInfoStamp_()
    : header()
    , startRingIndex()
    , endRingIndex()
    , pointColInd()
    , pointRange()
    , startOrientation(0.0)
    , endOrientation(0.0)
    , orientationDiff(0.0)
    , initialGuessX(0.0)
    , initialGuessY(0.0)
    , initialGuessZ(0.0)
    , initialGuessRoll(0.0)
    , initialGuessPitch(0.0)
    , initialGuessYaw(0.0)
    , odomAvailable(false)
    , cloud_projected()
    , extracted_corner()
    , extracted_surface()
    , extracted_normal()  {
    }
  CloudInfoStamp_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , startRingIndex(_alloc)
    , endRingIndex(_alloc)
    , pointColInd(_alloc)
    , pointRange(_alloc)
    , startOrientation(0.0)
    , endOrientation(0.0)
    , orientationDiff(0.0)
    , initialGuessX(0.0)
    , initialGuessY(0.0)
    , initialGuessZ(0.0)
    , initialGuessRoll(0.0)
    , initialGuessPitch(0.0)
    , initialGuessYaw(0.0)
    , odomAvailable(false)
    , cloud_projected(_alloc)
    , extracted_corner(_alloc)
    , extracted_surface(_alloc)
    , extracted_normal(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _startRingIndex_type;
  _startRingIndex_type startRingIndex;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _endRingIndex_type;
  _endRingIndex_type endRingIndex;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _pointColInd_type;
  _pointColInd_type pointColInd;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pointRange_type;
  _pointRange_type pointRange;

   typedef float _startOrientation_type;
  _startOrientation_type startOrientation;

   typedef float _endOrientation_type;
  _endOrientation_type endOrientation;

   typedef float _orientationDiff_type;
  _orientationDiff_type orientationDiff;

   typedef float _initialGuessX_type;
  _initialGuessX_type initialGuessX;

   typedef float _initialGuessY_type;
  _initialGuessY_type initialGuessY;

   typedef float _initialGuessZ_type;
  _initialGuessZ_type initialGuessZ;

   typedef float _initialGuessRoll_type;
  _initialGuessRoll_type initialGuessRoll;

   typedef float _initialGuessPitch_type;
  _initialGuessPitch_type initialGuessPitch;

   typedef float _initialGuessYaw_type;
  _initialGuessYaw_type initialGuessYaw;

   typedef uint8_t _odomAvailable_type;
  _odomAvailable_type odomAvailable;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _cloud_projected_type;
  _cloud_projected_type cloud_projected;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _extracted_corner_type;
  _extracted_corner_type extracted_corner;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _extracted_surface_type;
  _extracted_surface_type extracted_surface;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _extracted_normal_type;
  _extracted_normal_type extracted_normal;





  typedef boost::shared_ptr< ::rolo::CloudInfoStamp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rolo::CloudInfoStamp_<ContainerAllocator> const> ConstPtr;

}; // struct CloudInfoStamp_

typedef ::rolo::CloudInfoStamp_<std::allocator<void> > CloudInfoStamp;

typedef boost::shared_ptr< ::rolo::CloudInfoStamp > CloudInfoStampPtr;
typedef boost::shared_ptr< ::rolo::CloudInfoStamp const> CloudInfoStampConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rolo::CloudInfoStamp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rolo::CloudInfoStamp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rolo::CloudInfoStamp_<ContainerAllocator1> & lhs, const ::rolo::CloudInfoStamp_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.startRingIndex == rhs.startRingIndex &&
    lhs.endRingIndex == rhs.endRingIndex &&
    lhs.pointColInd == rhs.pointColInd &&
    lhs.pointRange == rhs.pointRange &&
    lhs.startOrientation == rhs.startOrientation &&
    lhs.endOrientation == rhs.endOrientation &&
    lhs.orientationDiff == rhs.orientationDiff &&
    lhs.initialGuessX == rhs.initialGuessX &&
    lhs.initialGuessY == rhs.initialGuessY &&
    lhs.initialGuessZ == rhs.initialGuessZ &&
    lhs.initialGuessRoll == rhs.initialGuessRoll &&
    lhs.initialGuessPitch == rhs.initialGuessPitch &&
    lhs.initialGuessYaw == rhs.initialGuessYaw &&
    lhs.odomAvailable == rhs.odomAvailable &&
    lhs.cloud_projected == rhs.cloud_projected &&
    lhs.extracted_corner == rhs.extracted_corner &&
    lhs.extracted_surface == rhs.extracted_surface &&
    lhs.extracted_normal == rhs.extracted_normal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rolo::CloudInfoStamp_<ContainerAllocator1> & lhs, const ::rolo::CloudInfoStamp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rolo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rolo::CloudInfoStamp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rolo::CloudInfoStamp_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rolo::CloudInfoStamp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rolo::CloudInfoStamp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rolo::CloudInfoStamp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rolo::CloudInfoStamp_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rolo::CloudInfoStamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95edffafd888edf477d4a6245ab452a2";
  }

  static const char* value(const ::rolo::CloudInfoStamp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95edffafd888edf4ULL;
  static const uint64_t static_value2 = 0x77d4a6245ab452a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::rolo::CloudInfoStamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rolo/CloudInfoStamp";
  }

  static const char* value(const ::rolo::CloudInfoStamp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rolo::CloudInfoStamp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header \n"
"\n"
"int32[] startRingIndex\n"
"int32[] endRingIndex\n"
"\n"
"int32[]  pointColInd # point column index in range image\n"
"float32[] pointRange # point range\n"
"\n"
"float32 startOrientation\n"
"float32 endOrientation\n"
"float32 orientationDiff\n"
"\n"
"# Initial guess from front lidar odometry\n"
"float32 initialGuessX\n"
"float32 initialGuessY\n"
"float32 initialGuessZ\n"
"float32 initialGuessRoll\n"
"float32 initialGuessPitch\n"
"float32 initialGuessYaw\n"
"bool odomAvailable\n"
"\n"
"# Point cloud messages\n"
"sensor_msgs/PointCloud2 cloud_projected  # original cloud\n"
"sensor_msgs/PointCloud2 extracted_corner    # extracted corner feature\n"
"sensor_msgs/PointCloud2 extracted_surface   # extracted surface feature\n"
"sensor_msgs/PointCloud2 extracted_normal   # extracted normal point(for back-end)\n"
"# sensor_msgs/PointCloud2 extracted_ground   # extracted ground\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/PointCloud2\n"
"# This message holds a collection of N-dimensional points, which may\n"
"# contain additional information such as normals, intensity, etc. The\n"
"# point data is stored as a binary blob, its layout described by the\n"
"# contents of the \"fields\" array.\n"
"\n"
"# The point cloud data may be organized 2d (image-like) or 1d\n"
"# (unordered). Point clouds organized as 2d images may be produced by\n"
"# camera depth sensors such as stereo or time-of-flight.\n"
"\n"
"# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n"
"# points).\n"
"Header header\n"
"\n"
"# 2D structure of the point cloud. If the cloud is unordered, height is\n"
"# 1 and width is the length of the point cloud.\n"
"uint32 height\n"
"uint32 width\n"
"\n"
"# Describes the channels and their layout in the binary data blob.\n"
"PointField[] fields\n"
"\n"
"bool    is_bigendian # Is this data bigendian?\n"
"uint32  point_step   # Length of a point in bytes\n"
"uint32  row_step     # Length of a row in bytes\n"
"uint8[] data         # Actual point data, size is (row_step*height)\n"
"\n"
"bool is_dense        # True if there are no invalid points\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/PointField\n"
"# This message holds the description of one point entry in the\n"
"# PointCloud2 message format.\n"
"uint8 INT8    = 1\n"
"uint8 UINT8   = 2\n"
"uint8 INT16   = 3\n"
"uint8 UINT16  = 4\n"
"uint8 INT32   = 5\n"
"uint8 UINT32  = 6\n"
"uint8 FLOAT32 = 7\n"
"uint8 FLOAT64 = 8\n"
"\n"
"string name      # Name of field\n"
"uint32 offset    # Offset from start of point struct\n"
"uint8  datatype  # Datatype enumeration, see above\n"
"uint32 count     # How many elements in the field\n"
;
  }

  static const char* value(const ::rolo::CloudInfoStamp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rolo::CloudInfoStamp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.startRingIndex);
      stream.next(m.endRingIndex);
      stream.next(m.pointColInd);
      stream.next(m.pointRange);
      stream.next(m.startOrientation);
      stream.next(m.endOrientation);
      stream.next(m.orientationDiff);
      stream.next(m.initialGuessX);
      stream.next(m.initialGuessY);
      stream.next(m.initialGuessZ);
      stream.next(m.initialGuessRoll);
      stream.next(m.initialGuessPitch);
      stream.next(m.initialGuessYaw);
      stream.next(m.odomAvailable);
      stream.next(m.cloud_projected);
      stream.next(m.extracted_corner);
      stream.next(m.extracted_surface);
      stream.next(m.extracted_normal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CloudInfoStamp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rolo::CloudInfoStamp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rolo::CloudInfoStamp_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "startRingIndex[]" << std::endl;
    for (size_t i = 0; i < v.startRingIndex.size(); ++i)
    {
      s << indent << "  startRingIndex[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.startRingIndex[i]);
    }
    s << indent << "endRingIndex[]" << std::endl;
    for (size_t i = 0; i < v.endRingIndex.size(); ++i)
    {
      s << indent << "  endRingIndex[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.endRingIndex[i]);
    }
    s << indent << "pointColInd[]" << std::endl;
    for (size_t i = 0; i < v.pointColInd.size(); ++i)
    {
      s << indent << "  pointColInd[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.pointColInd[i]);
    }
    s << indent << "pointRange[]" << std::endl;
    for (size_t i = 0; i < v.pointRange.size(); ++i)
    {
      s << indent << "  pointRange[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pointRange[i]);
    }
    s << indent << "startOrientation: ";
    Printer<float>::stream(s, indent + "  ", v.startOrientation);
    s << indent << "endOrientation: ";
    Printer<float>::stream(s, indent + "  ", v.endOrientation);
    s << indent << "orientationDiff: ";
    Printer<float>::stream(s, indent + "  ", v.orientationDiff);
    s << indent << "initialGuessX: ";
    Printer<float>::stream(s, indent + "  ", v.initialGuessX);
    s << indent << "initialGuessY: ";
    Printer<float>::stream(s, indent + "  ", v.initialGuessY);
    s << indent << "initialGuessZ: ";
    Printer<float>::stream(s, indent + "  ", v.initialGuessZ);
    s << indent << "initialGuessRoll: ";
    Printer<float>::stream(s, indent + "  ", v.initialGuessRoll);
    s << indent << "initialGuessPitch: ";
    Printer<float>::stream(s, indent + "  ", v.initialGuessPitch);
    s << indent << "initialGuessYaw: ";
    Printer<float>::stream(s, indent + "  ", v.initialGuessYaw);
    s << indent << "odomAvailable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.odomAvailable);
    s << indent << "cloud_projected: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.cloud_projected);
    s << indent << "extracted_corner: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.extracted_corner);
    s << indent << "extracted_surface: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.extracted_surface);
    s << indent << "extracted_normal: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.extracted_normal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROLO_MESSAGE_CLOUDINFOSTAMP_H
